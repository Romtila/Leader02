// <auto-generated />
using System;
using Leader02.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Leader02.Infrastructure.Migrations
{
    [DbContext(typeof(Leader02Context))]
    [Migration("20230521111033_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Leader.Domain.Entity.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdminUsers");
                });

            modelBuilder.Entity("Leader.Domain.Entity.ChatBotRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FeedBack")
                        .HasColumnType("integer");

                    b.Property<string>("FeedBackString")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChatBotRequests");
                });

            modelBuilder.Entity("Leader.Domain.Entity.ChatBotRequestMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatBotRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChatBotRequestId");

                    b.ToTable("ChatBotRequestsMessages");
                });

            modelBuilder.Entity("Leader.Domain.Entity.Consultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ConsultationSlotId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConsultationSlotId1")
                        .HasColumnType("uuid");

                    b.Property<long>("DepartmentUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FinishDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OtherInformation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StarDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("VideoRecordPath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationSlotId1");

                    b.HasIndex("DepartmentUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("Leader.Domain.Entity.ConsultationSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OtherInformation")
                        .HasColumnType("text");

                    b.Property<DateTime>("SlotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SlotTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SubDepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("ConsultationSlots");
                });

            modelBuilder.Entity("Leader.Domain.Entity.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DepartmentUrl")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Leader.Domain.Entity.DepartmentUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationaryPhone")
                        .HasColumnType("text");

                    b.Property<int>("SubDepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("DepartmentUsers");
                });

            modelBuilder.Entity("Leader.Domain.Entity.SubDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubDepartmentDescription")
                        .HasColumnType("text");

                    b.Property<string>("SubDepartmentUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("SubDepartments");
                });

            modelBuilder.Entity("Leader.Domain.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DitSecurityAnswer")
                        .HasColumnType("text");

                    b.Property<string>("DitSecurityQuestion")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Inn")
                        .HasColumnType("integer");

                    b.Property<int?>("Kpp")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Okveds")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Snils")
                        .HasColumnType("integer");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Leader.Domain.Entity.ChatBotRequest", b =>
                {
                    b.HasOne("Leader.Domain.Entity.User", "User")
                        .WithMany("ChatBotRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Leader.Domain.Entity.ChatBotRequestMessage", b =>
                {
                    b.HasOne("Leader.Domain.Entity.ChatBotRequest", "ChatBotRequest")
                        .WithMany("ChatBotRequestMessages")
                        .HasForeignKey("ChatBotRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatBotRequest");
                });

            modelBuilder.Entity("Leader.Domain.Entity.Consultation", b =>
                {
                    b.HasOne("Leader.Domain.Entity.ConsultationSlot", "ConsultationSlot")
                        .WithMany()
                        .HasForeignKey("ConsultationSlotId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leader.Domain.Entity.DepartmentUser", "DepartmentUser")
                        .WithMany("Consultations")
                        .HasForeignKey("DepartmentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leader.Domain.Entity.User", "User")
                        .WithMany("Consultations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultationSlot");

                    b.Navigation("DepartmentUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Leader.Domain.Entity.ConsultationSlot", b =>
                {
                    b.HasOne("Leader.Domain.Entity.SubDepartment", "SubDepartment")
                        .WithMany("ConsultationSlots")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDepartment");
                });

            modelBuilder.Entity("Leader.Domain.Entity.DepartmentUser", b =>
                {
                    b.HasOne("Leader.Domain.Entity.SubDepartment", "SubDepartment")
                        .WithMany("DepartmentUsers")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDepartment");
                });

            modelBuilder.Entity("Leader.Domain.Entity.SubDepartment", b =>
                {
                    b.HasOne("Leader.Domain.Entity.Department", "Department")
                        .WithMany("SubDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Leader.Domain.Entity.ChatBotRequest", b =>
                {
                    b.Navigation("ChatBotRequestMessages");
                });

            modelBuilder.Entity("Leader.Domain.Entity.Department", b =>
                {
                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("Leader.Domain.Entity.DepartmentUser", b =>
                {
                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("Leader.Domain.Entity.SubDepartment", b =>
                {
                    b.Navigation("ConsultationSlots");

                    b.Navigation("DepartmentUsers");
                });

            modelBuilder.Entity("Leader.Domain.Entity.User", b =>
                {
                    b.Navigation("ChatBotRequests");

                    b.Navigation("Consultations");
                });
#pragma warning restore 612, 618
        }
    }
}
